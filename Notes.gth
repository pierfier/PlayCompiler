Tokenizer
=========
- Each token will be stored as an enum
- Token struct :
    - type (enum)- 
        key: Func, if, let, in
        id: function or variable name, cannot start with a number
        op: =, +, -, *, /
        logic: ||, &&, <, ==, > etc.
        group: [], (), {}
        sep: ","
        lit: "asdfasf", 5, 5.0
        ** For string literals, the '\' will be recognized as an escape character
    

    - value -
        The stuff after the colons from above showing what types everything is


Parser
======
(Will try to write out the grammer for the entire language here)

Notation Symblage for grammer:
------------------------------

quotes indicate the literal string to be present in the grammer. 
Angle brackets refer to a left hand expression
pipes means either elements

Program -> *<Function> Main      'Read as some or none Function declarations, and then a main function'
Function -> "Func"
Main -> "Main" "=" "do" <Commands>

Commands -> <Let expr> | <If expr> | <Function call>
Function call -> 'Need to explicitly implement this as auto curry, anything until next call'




Main Library Functions
======================
- I am wondering if standard library functions are directly written into the compiler binary?
**For example, tail() will be recognized by the front-end, and then there is already code that generates the code block that does the tail() functionality**
